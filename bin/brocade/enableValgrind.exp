#!/usr/bin/expect
# File: enableValgrind.exp
# Purpose: Automate process of enabling valgrind on a switch


# ********************************************************* #
# Globals
# ********************************************************* #
set reboot 1
set disable 0
set rc 0


# ********************************************************* #
# Process arguments 
# ********************************************************* #

# Expected args:
#    * -d, --daemon: daemon 
#	 * -i, --ip: ip address
#	 * -h, --help: print help
#	 * --no_reboot
#	 # --disable

# Process passed args
if { $argc > 0 } {
	# Step through each arg (for loop)
	for {set i 0} {$i < $argc} {incr i 1} {
		set arg [lindex $argv $i];

		# Switch based on flag
		switch -regex -- "$arg" {

			(^-d)|(^--daemon) {
				# Check if daemon is composed of at least one lower case letter
				set result [ regexp {^(([a-z]+)|([a-z]+_[a-z]*))d$} [lindex $argv [expr $i + 1]] daemon ];
				if { $result != 1 } {
					puts "\nInvalid daemon: [lindex $argv [expr $i + 1]]";
					puts "Please use only letters and it should end with a \"d\"";
					exit -1;
				}

				# Increment counter to next flag
				set i [expr $i + 1];
			}

			(^-i)|(^--ip) {
				# Check if ip address is in correct format
				set result [ regexp {^(([0-9]{1,3}[\.]){3}[0-9]{1,3})$} [lindex $argv [expr $i + 1]] -> ip ]
				if { $result != 1 } {
					puts "\nInvalid ip address: [lindex $argv [expr $i + 1]]";
					puts "Please input a valid ip address format";
					exit -1;
				}

				# Increment counter to next flag
				set i [expr $i + 1];
			}

			(^--no_reboot) {
				# Do not reboot switch after valgrind enabled (won't take effect)
				# This is for debugging purposes
				set reboot 0
			}

			(^--disable) {
				# This will disable valgrind instead of enabling it
				set disable 1
			}

			(^-h)|(^--help) {
				puts "Expected args:";
				puts "	* -d, --daemon: daemon";
				puts "	* -i, --ip: ip address";
				puts "	* -h, --help: print help";
				puts "	* --disable";
				puts "	* --no_reboot";
				exit -1;
			}

			default {
				puts "\nUnknown parameter specified: $arg";
				exit -1;
			}
		}
	}
} else {
	puts "\nNo arguments specified";
	puts "Expected args:";
	puts "	* -d, --daemon: daemon";
	puts "	* -i, --ip: ip address";
	puts "	* -h, --help: print help";
	puts "	* --disable";
	puts "	* --no_reboot";
	exit -1;
}

# Print parameters
puts "\ndaemon   : $daemon";
puts "switch ip : $ip";


# ********************************************************* #
# Ping switch to make sure it exists / is available
# ********************************************************* #

# Ping IP address to see if switch is up/ exists
puts "\nPinging IP address";
spawn ping -c 1 "$ip"
set timeout 30;
expect {
	" 0%" {
		puts "\nSuccess";
	}
	" 100%" {
		puts "Failure. Aborting";
		exit -1;
	}
}


# ********************************************************* #
# Enable Valgrind for specified daemon
# ********************************************************* #

# SSH to IP address
puts "\nSSH to IP address"
set pass fibranne
spawn ssh root@$ip
expect {
	"assword" {
		send "$pass\r"
	}
	"Are you sure you want to continue" {
		send "yes\r"
		expect "assword" {
			send "$pass\r"
		}
	}
}
expect {
	"Use Control-C" {
		# Send <C-c>
		send \003
		sleep 2
	}
	">" {
		# Do nothing
	}
}

# Enable Valgrind for specified daemon
if { $disable == 0 } {
	send "nos_valgrind -a 1 -b ${daemon}\r"
	expect {
		"Valgrind enabled for" {
			# Wait for command prompt
			expect ">"
	
			# Disable watchdog timer to prevent automatic reboot when binary terminated
			send "chkconfig swdd off\r"
	
			# Reboot (if specified)
			if { $reboot } {
				send "reboot\r"
				expect "Are you sure you want to reboot the switch" {
					send "y\r"
				}
			} else {
				send "exit\r"
			}
		}
		"Invalid binary name" {
			# Invalid daemon specified 
			set rc -1

			# Wait for command prompt
			expect "Usage : nos_valgrind -f"
			expect ">"

			# Exit
			send "exit\r"
		}
	}
} else {
	send "nos_valgrind -a 0 -b ${daemon}\r"
	expect {
		"Valgrind disabled for" {
			# Wait for command prompt
			expect ">"

			# Make sure watchdog is enabled
			send "chkconfig swdd on\r"

			# Reboot (if specified)
			if { $reboot } {
				send "reboot\r"
				expect "Are you sure you want to reboot the switch" {
					send "y\r"
				}
			} else {
				send "exit\r"
			}
		}
		"Invalid binary name" {
			# Invalid daemon specified 
			set rc -1

			# Wait for command prompt
			expect "Usage : nos_valgrind -f"
			expect ">"

			# Exit
			send "exit\r"
		}
	}
}	
interact

if { $rc == 0 } {
	if { $disable == 0 } {
		puts "\nSUCCESS: Valgrind enabled\n"
	} else {
		puts "\nSUCCESS: Valgrind disabled\n"
	}
} else {
	puts "\nERROR: Invalid daemon specified\n"
}
